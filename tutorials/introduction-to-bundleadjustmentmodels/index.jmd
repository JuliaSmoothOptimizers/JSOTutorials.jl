---
title: "Introduction to BundleAdjustmentModels"
tags: ["models", "nlpmodels", "nlsmodels", "test set", "bundle adjustment"]
author: "Antonin Kenens"
---

```julia
using BundleAdjustmentModels
```

## Get the list of problems

Using the `problems_df()` function will show you a dataframe of all the bundle adjustment problems.

Since there are 74 different models, you can sort the dataframe depending on the following elements:

- the name of the model
- the group of the model
- the size of the jacobian matrix (nequ, nvar)
- the number of non-zeros elements in the jacobian matrix (nnzj)

```julia
df = problems_df()
filter_df = df[ ( df.nequ .≥ 50000 ) .& ( df.nvar .≤ 34000 ), :]
```

In the example above, we wanted the jacobian to have at least 50000 lines and less than 34000 columns.

This dataframe is only listing the matrices that you can have access to, but in order to use them you need to download them and that is how this package is really useful.

First, let us see how you can do it and then we will explain how it works.

As you can see just above, we got a dataframe of two problems that we filtered. What we want to do now is to select the first one in the listing.

```
name = filter_df[1, :name]
```

What this method did is that it selected the name of the first problem in the dataframe.

Now that you got the name you probably want to have access to the problem itself. And there are 2 solutions:

- You can download the problem archive file
- You can automatically create a non linear least square problem using NLPModels from JuliaSmoothOptimizers

## Get the problem archive file

First, you might wonder, why did I go through all of this to get a file I can directly download on the original website if I don't want to use NLPModels.

The reason is: **it is cleaner**. We use Julia Artifacts technology so this way:

1. You download every model only once
2. It is identified with a unique hash so you can always find it back 
3. You can delete them all with a single command line

```
path = fetch_ba_name(name)
```

This method, used with the variable `name` defined above, will automatically download the problem and give you the path to it.
If it is already downloaded it will simply get you the path to it.

You can also directly download and get access to an entire group of problems like this :

```
paths = fetch_ba_group("ladybug")
println(paths[1])
```

It will return a vector of the paths to all the problems.

## Generate a non linear least square model

Now, let's say you want to work on the model itself.

```julia
df = problems_df()
filter_df = df[ ( df.nequ .≥ 50000 ) .& ( df.nvar .≤ 34000 ), :]
name = filter_df[1, :name]
model = BundleAdjustmentModel(name)
println(model.meta.name)
```

Or

```julia
model = BundleAdjustmentModel("problem-49-7776-pre")
println(model.meta.name)
```

This command will generate the model out of the `name` variable defined above or the given string (and automatically download it if it's not been done already).

## Using the model

Now that you have your model and all its metadata in your `model` variable you might want to use it.

```julia
using NLPModels
using LinearAlgebra
```

### Residual of the model

You can calculate the residual of the model:

```julia
model = BundleAdjustmentModel("problem-49-7776-pre.txt.bz2")
x = model.meta.x0
Fx = residual(model,x)
println(norm(Fx))
```

The in place method is also available if you don't want to use too much memory.

```julia
model = BundleAdjustmentModel("problem-49-7776-pre.txt.bz2")
x = model.meta.x0
Fx = zeros(model.nls_meta.nequ)
Fx = residual!(model,x,Fx)
println(norm(Fx))
```

### Jacobian of the model

You can also have access to the linear operator of the jacobian of the model which is calculated by hand (in contradiction to automatic differentiation).

You need to call `jac_structure_residual!` at least once before calling `jac_op_residual!`.

```julia
model = BundleAdjustmentModel("problem-49-7776")
meta_nls = nls_meta(model)
rows = Vector{Int}(undef, meta_nls.nnzj)
cols = Vector{Int}(undef, meta_nls.nnzj)
jac_structure_residual!(model, rows, cols)
```

You need to call `jac_coord_residual!` everytime before calling `jac_op_residual!` to update it to the current point.

```julia
model = BundleAdjustmentModel("problem-49-7776")
vals = similar(model.meta.x0, meta_nls.nnzj)
jac_coord_residual!(model, model.meta.x0, vals)
```

Finally you can use `jac_op_residual!`:

```julia
model = BundleAdjustmentModel("problem-49-7776")
meta_nls = nls_meta(model)

rows = Vector{Int}(undef, meta_nls.nnzj)
cols = Vector{Int}(undef, meta_nls.nnzj)
jac_structure_residual!(model, rows, cols)

vals = similar(model.meta.x0, meta_nls.nnzj)
jac_coord_residual!(model, model.meta.x0, vals)

Jv = similar(model.meta.x0, meta_nls.nequ)
Jtv = similar(model.meta.x0, meta_nls.nvar)
Jx = jac_op_residual!(model, rows, cols, vals, Jv, Jtv)
```

There is no second order information available for problems in this module.

## Delete the problems

Once you have finished working with a specific model you can delete it the same way you downloaded it.

```julia
delete_ba_artifact!("problem-49-7776")
```

A small Info will appear to tell you if it's been successfully deleted.

If you want to clean your workspace or save some more space you can also delete all the problems at once.

```julia
delete_all_ba_artifacts!()
```

That's it for this tutorial ! If you have any problems with the package do not hesitate to open an issue and I will try to fix it.
